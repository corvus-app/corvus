import { GraphState, summarizerModel } from "..";
import { ChatPromptTemplate } from "@langchain/core/prompts";
import { StringOutputParser } from "@langchain/core/output_parsers";
import file from "@/package.json";

/**
 * This node is responsible for generating the initial context from the question and the package.json file of the codebase.
 * The context is generated by asking the AI to identify relevant frameworks, libraries, or dependencies that can be identified with the question from the package.json.
 * The AI is given the package.json file of the codebase which includes all modules and dependencies used in the codebase, and the initial question.
 * The AI is then asked to generate a context which is a string that is a summary of the relevant frameworks, libraries, or dependencies that can be identified with the question.
 * The output of this node is a string that is the generated context.
 * @param {typeof GraphState.State} state The current state of the graph.
 * @returns {Promise<Partial<typeof GraphState.State>>} The new state object.
 */
export async function generateRelevantDependencies(
  state: typeof GraphState.State
): Promise<Partial<typeof GraphState.State>> {
  if (state.technologies) return { technologies: state.technologies };
  console.log("---GENERATE RELEVANT DEPENDENCIES---");

  const prompt = ChatPromptTemplate.fromTemplate(
    `You are a thought within a chain of thoughts designed to mention relevant links, GitHub commits and documents that should help with the question.. 
    You will be given the package.json file of the codebase which includes all modules and dependencies used in the codebase.
    You are tasked with identifying relevant frameworks, libraries, or dependencies that can be identified with the question.

    Here is the package.json file:
    <file>
    {file}
    </file>
    
    Here is the initial question:
    <question>
    {question}
    </question>

    If there are no relevant dependencies, do not respond. 
    Otherwise, base your response on distinct dependencies listed only in the package.json file with no preamble or explanation.
    If any two dependencies have words in common, do not list them both.
    `
  );

  // Construct the RAG chain by piping the prompt, model, and output parser
  const ragChain = prompt.pipe(summarizerModel).pipe(new StringOutputParser());

  const technologies = await ragChain.invoke({
    question: state.question,
    file: JSON.stringify(file),
  });

  console.log(technologies);
  const traceback =
    "---QUESTION IS RELEVANT---\n" +
    state.question +
    "\n" +
    "---GENERATE RELEVANT DEPENDENCIES---\n" +
    technologies +
    "\n";

  return {
    technologies,
    traceback,
  };
}
